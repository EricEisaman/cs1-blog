aframe-custom-6.01.20.js:82880 A-Frame Version: 1.0.4 (Date 2020-05-28, Commit #2ced23bf)
aframe-custom-6.01.20.js:82881 THREE Version (https://github.com/supermedium/three.js): ^0.116.0
aframe-custom-6.01.20.js:82883 WebVR Polyfill Version: ^0.10.12
cs1.js:49 CS1 Game Engine Version:  0.0.10
cs1Script.js:91 creating scene ...
setRenderOrder.js:6 render-order layers set to: background middleground foreground
cs1Script.js:98 scene not playing, setting load handler ...
game.js:14 initializing game system ...
player.js:15 Player system responding to CS1.scene being detected.
player.js:29 initializing player system ...
player.js:30 Creating CS1.myPlayer ....
player.js:34 player-ready


VM90791:1 Service Worker registered ServiceWorkerRegistration
cs1Script.js:36 scene loaded event, cs1-script handler ...
cs1Script.js:40 Dispatching cs1-ready event ...
cs1rigcam.js:12 CS1Cam system responding to cs1-ready event ....
game.js:26 starting game ...
cs1avatar.js:11 my-avatar-ready
view.js:8 Setting game view.
thirdPerson.js:12 Setting game as THIRD_PERSON.
thirdPerson.js:38 view-ready


e=>{
      console.log('DOMContentLoaded Handler')
      console.log(e)
      let scene = document.querySelector('a-scene');
      let code,scripts;
      if(self && self.innerHTML){
        code = self.innerHTML;
        scripts = document.querySelectorAll('cs1-script');
        const scriptsArray = Array.from(scripts);
        if(scriptsArray.length>1){
          scriptsArray.forEach(s=>{
            const src = s.getAttribute('src');
            if(src) self.waitFor.push(s);
          });
        }
      }
      function setLoadHandler(){
        scene.addEventListener('loaded', e=>{
            console.log('scene loaded event, cs1-script handler ...')
            CS1.scene.clock.autoStart = false;
            console.log(`cs1-script wait for : ${self.waitFor.length}`);
            if(!CS1.flags.isReady){
              console.log('Dispatching cs1-ready event ...')
              document.body.dispatchEvent( new Event('cs1-ready'))
              CS1.flags.isReady = true;
            }
            if(code){
              if(self.waitFor.length){
                self.waitFor.forEach(s=>{
                  s.addEventListener('cs1-script-fired', e=>{
                    console.log('handling cs1-script-fired event ...')
                    if(++self.waitCount==self.waitFor.length) eval(code)
                    console.log(`cs1-script wait count : ${self.waitCount}`)
                    console.log(`cs1-script wait for : ${self.waitFor.length}`)
                  })
                })
              }else{
                const wrapped = `(async function(){${code}})()`
                eval(wrapped);
              }  
            }else{
              fetch(self.getAttribute('src'))
               .then(res=>res.text())
               .then(t=>{
                  const wrapped = `(async function(){${t}})()`
                  eval(wrapped)
                  self.dispatchEvent( new Event('cs1-script-fired'))
                })
            }
        })
      }
      // Add DSL when creating CS1.scene
      if(scene && !CS1.scene){
        console.log('scene detected ...')
        if(!scene.isPlaying){
          CS1.scene = scene;
          CS1.scene.setRenderOrder = setRenderOrder;
          CS1.scene.setRenderOrder();
          console.log('scene not playing, setting load handler ...')
          document.body.dispatchEvent( new Event('scene-ready'))
          setLoadHandler();
        }
      }else if(scene && !scene.isPlaying){
        console.log('scene not playing, setting load handler ...')
        document.body.dispatchEvent( new Event('scene-ready'))
        setLoadHandler();
      }else if(!scene && !CS1.scene){
        console.log('creating scene ...')
        scene = document.createElement('a-scene');
        document.body.appendChild(scene);
        CS1.scene = scene;
        CS1.scene.setRenderOrder = setRenderOrder;
        CS1.scene.setRenderOrder();
        if(!scene.isPlaying){
          console.log('scene not playing, setting load handler ...')
          document.body.dispatchEvent( new Event('scene-ready'))
          setLoadHandler();
        }
      }
    }